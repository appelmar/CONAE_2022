---
#title: "Analyzing satellite image collections on public cloud platforms with R"
format: 
  revealjs:
    #transition: fade
    theme: theme_slides.scss
#subtitle: "Tutorial at CONAE spring school 2022"
#date: "Sept. 27, 2022"
slide-number: "c/t"
author: "Marius Appel"
chalkboard: true
footnotes-hover: true
footer: ""
#logo: "Logo_ifgi_short.svg"
---


# Analyzing satellite image collections<br/>on public cloud platforms with R

**CONAE spring school 2022**

Marius Appel

Sept. 27, 2022







## Motivation


- Data availability (e.g. Sentinel-2) in the cloud

- Method availability (e.g. in R, > 18k CRAN packages)

- Who wants to download > 100 GB from data portals?







## Tutorial overview


**Objective:** Show **how** you can analyze satellite image collections in the cloud with R

1. **Introduction**: 
    1. Cloud computing
    2. Satellite imagery in the cloud
    3. Cloud-native geospatial echnologies
    4. R ecosystem
  
2. **Live examples**
    1. Creating composite images
    2. Complex time series analysis
    3. Extraction from data cubes
  
3. **Discussion**


All **materials** are available on GitHub: [https://github.com/appelmar/CONAE_2022](https://github.com/appelmar/CONAE_2022).


# 1. The cloud {background-color="#546e7a"}


## "... in the cloud"


:::: {.columns}

::: {.column width="45%"}
**Services**: 

- [Google Earth Engine (GEE)](https://earthengine.google.com/)
- [Sentinel Hub](https://www.sentinel-hub.com/)
- [openEO backends](https://hub.openeo.org)
- ...
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
**Infrastructure providers**:

- Amazon web services (AWS)
- Google Cloud Platform
- Microsoft Azure
- ...
:::

::::





**Somewhere in between**: Microsoft Planetary Computer

<br/>

:::{.fragment}
In this tutorial, we will use a custom machine on AWS to analyze satellite image collections _in the cloud_.
:::


## Cloud infrastructure (AWS)

- Lots of separate data centers with large clusters

![](img/aws.png)

- In total: > 25 regions and > 80 availability zones
- Basic service to run (virtual) machines: EC2 (Amazon Elastic Compute Cloud)



## Running a machine in the cloud (AWS)

1. Select a region and [machine instance type](https://aws.amazon.com/de/ec2/pricing/on-demand), based on costs, hardware, and OS

2. Create a key pair for accessing the machine over SSH

3. Click "Launch instance" and follow instructions

4. Connect via SSH and install software (PROJ, GDAL, R, RStudioServer[^1], R packages, ...)


_Notice that security considerations (e.g. by using IAM roles, multi-factor authorization) are **NOT** part of this tutorial._


[^1]: You need to add a security rule to allow public / protected access to RStudioServer.





## AWS Management Console



[![](img/screenshot_aws.png)](https://us-west-2.console.aws.amazon.com/console/home?region=us-west-2)




# 2. Satellite imagery on cloud platforms {background-color="#546e7a"}



## Example platforms and available data

<br/><br/>

| Provider | Data |
|:--------|:------------------------------|
| Amazon web services (AWS) | Sentinel, Landsat, ERA 5, OSM, CMIP 6, and more, see [here](https://registry.opendata.aws/?search=tags:gis,earth%20observation,events,mapping,meteorological,environmental,transportation) |
| Google Cloud Platform | Landsat, Sentinel, [access to GEE data](https://developers.google.com/earth-engine/cloud/earthengine_cloud_project_setup) |
| Copernicus DIASes | Sentinel + more (see [here](https://earsc.org/dias-comparison/)) |
| Microsoft Planetary Computer | Sentinel, Landsat, MODIS and more, see [here](https://planetarycomputer.microsoft.com/catalog) |



## Object Storage: S3

EC2 machines have local storage (EBS) but big data archives use highly scalable **object storage**.

S3 elements:

- **Bucket**: container for objects that are stored in a specific AWS region 
- **Objects**: Individual files and corresponding metadata within a bucket, identified by a unique key
- **Key**: Filenames / Path or similar; unique within a bucket

Pricing (storage, transfer, requests):

- Bucket owner pays by default
- For **requester pays** buckets, transfer and requests are paid by users


## S3 examples

<br/><br/>

Buckets:

- [https://registry.opendata.aws/sentinel-2](https://registry.opendata.aws/sentinel-2)
- [https://registry.opendata.aws/usgs-landsat/](https://registry.opendata.aws/usgs-landsat/)


Object:

- [https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/20/J/ML/2022/3/S2B_20JML_20220330_0_L2A/B04.tif](https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/20/J/ML/2022/3/S2B_20JML_20220330_0_L2A/B04.tif)




## Data access


- Buckets are **not** a drive on your machine
- Data access over HTTP requests (PUT, GET, DELETE, ...)

<br/><br/>

### Challenges


1. How to find images by location, time, and other criteria? 

2. How to efficiently read image data from S3 without copying images to our machine storage first? 





# 3. Cloud-native geospatial: STAC, COGs, and data cubes {background-color="#546e7a"}



## STAC overview


- Standardized JSON-based language for describing catalogs of **spatiotemporal** data (imagery, point clouds, SAR)

- Extensible (available extensions include EO, Data Cubes, Point Clouds, and more)

- 1.0.0 release available since May 2021

- Growing ecosystem

:::: {.columns}

::: {.column width="30%"}
:::
::: {.column width="40%"}
![](https://github.com/radiantearth/stac-site/raw/master/images/logo/stac-030-long.png)
:::
::: {.column width="30%"}
:::

::::




## STAC specification



![](img/STAC_overview.png){fig-align="center"}


- **Items** are inseparable objects of data (assets) and metadata (e.g. a single satellite image)
- **Catalogs** can be nested
- **Collections** extend catalogs and can be used to group items and their metadata (e.g. license)



## STAC API

**Static STAC catalogs**

- Typically set of linked JSON files, starting with a `catalog.json`
- Catalog JSON contains links to collections, nested catalogs, or items
- Items contain assets (links to files) and metadata 
- Problem: All items must be processed for searching
- Example: [https://meeo-s5p.s3.amazonaws.com/catalog.json](https://stacindex.org/catalogs/sentinel-5p-level2-aws#/)


**STAC API**

- Web-service for dynamic search of STAC items by area of interest, datetime, and other metadata
- Compliant with OGC API - Features standard

**STAC Index**

- A good starting point to find available STAC collections and API services: [https://stacindex.org](https://stacindex.org)





## Cloud-optimized GeoTIFF (COG)

**Image file formats must be cloud-friendly to reduce transfer times and costs associated with transfer and requests**



:::: {.columns}

::: {.column width="50%"}
- COG = Normal **tiled** **GeoTIFF** files whose content follows a **specific order of data and metadata** ([see full spec here](https://github.com/cogeotiff/cog-spec/blob/master/spec.md))

- support compression

- support efficient **HTTP range requests**, i.e. partial reading of images (blocks, and overviews) over cloud storage

- may contain overview images (image pyramids) 
:::

::: {.column width="50%"}

![](img/s2_overviews.png)
:::

::::


**[GDAL](https://gdal.org/) can efficiently read and write COGs, and access object storage in the cloud with [_virtual file systems_](https://gdal.org/user/virtual_file_systems.html)**





## Satellite image collections

Images spatially overlap, have different coordinate reference systems, have different pixel sizes depending on spectral bands, yield irregular time series for larger areas



![](img/screenshot_cophub.png){fig-align="center"}








## What is a data cube?

Here: **A four-dimensional (space, time, variable / band) regular raster data cube**

![](img/cube.png)

- collect all observations in one object
- $b \times t \times y \times x \rightarrow$ real value
- single CRS, cells have constant temporal duration, and spatial size



## Data Cube creation is lossy



![](img/cubecreation.png)
**Important:** There is no single correct data cube!







# 4. R ecosystem for analyzing satellite imagery (in the cloud) {background-color="#546e7a"}




## R packages


::: {.panel-tabset}

### raster / terra

- General packages for raster data analysis 
- terra [@terra] is a newer (faster) package that replaces raster [@raster]  
- Support two- or three-dimensional rasters
- Include lots of analysis tools


### stars

- Flexible package for spatiotemporal arrays / data cubes with arbitrary number of dimensions [@stars]
- Supports raster and vector data cubes

:::: {.columns}

::: {.column width="33%"}
![](https://raw.githubusercontent.com/r-spatial/stars/master/images/cube1.png)
:::
::: {.column width="33%"}
![](https://raw.githubusercontent.com/r-spatial/stars/master/images/cube3.png)
:::
::: {.column width="33%"}
![](https://raw.githubusercontent.com/r-spatial/stars/master/images/cube2.png)
:::


::::

<div style="font-size:50%; color:#999999; text-align:right; font-style:italic;">
Imagery from https://r-spatial.github.io/stars
</div>



### gdalcubes

- Creation and processing of four-dimensional (space, time, variable) data cubes from irregular image collections [@gdalcubes]

- Parallel chunk-wise processing 

- Documentation available at [https://gdalcubes.github.io/](https://gdalcubes.github.io/)


![](img/cubecreation.png){ width="650" fig-align="center"}




### sits

- Generic package for satellite image time series analysis [@sits]
- Builds on top of previous packages
- Includes sophisticated methods with a focus on time series classification
- Documentation: [https://e-sensing.github.io/sitsbook/](https://e-sensing.github.io/sitsbook/)

![](https://github.com/e-sensing/sits/raw/master/inst/extdata/markdown/figures/sits_general_view.jpg){ width="400" fig-align="center"}

<div style="font-size:50%; color:#999999; text-align:right; font-style:italic;">
Imagery from https://github.com/e-sensing/sits
</div>

### others

- **rstac** [ @rstac]: Query images from STAC-API services 
- **sp** [@sp]: replaced by sf and stars 
- **openeo** [@openeo]: Connect to and analyse data at openEO backends

:::





::: {.fragment}
**This tutorial focuses on the packages `rstac` and `gdalcubes`.**
:::








# Live examples {background-color="#546e7a"}

see [https://appelmar.github.io/CONAE_2022](https://appelmar.github.io/CONAE_2022)



# Discussion {background-color="#546e7a"}



## Discussion

</br>

:::: {.columns}

::: {.column width="35%"}
### Advantages

- Access to huge data archives

- Flexibility: You can do whatever you can do on your local machine

- Powerful machines available

- Open source software only
:::

::: {.column width="5%"}
::: 

::: {.column width="60%"}
### Disadvantages

- Not free

- GEE and others can be easier to use (some are free)

- Your institution's computing center might have more computing resources (_for free_)

- Setup and familiarization needed

- Depends on the existence of STAC-API services and imagery as COGs!
:::

::::

:::{.fragment}
→ Which tools / platforms / environments are most efficient to use highly depends on factors like _data volume, computational effort, data & method availability, effort needed to familiarization and reimplementation_, and others.

:::

---



## Summary

- Cloud-computing platforms contain lots of satellite data

- Cloud storage differs from local storage

- Technology and tools: 

  - STAC (and STAC API!) for efficient and standardized search of spatiotemporal EO data
  
  - COGs allow efficiently reading parts of imagery, potentially on lower resolution
  
  - GDAL has everything for efficient data access on cloud storage
  
  - gdalcubes makes the creation and processing of data cubes from satellite image collections in R easier
  




# Thanks!


**Slides and notebooks:**

https://github.com/appelmar/CONAE_2022

<br/>

**Contact:**

[&#64;appelmar](https://twitter.com/appelmar)

[marius.appel@uni-muenster.de](mailto:marius.appel@uni-muenster.de)


## References

::: {#refs}
:::


